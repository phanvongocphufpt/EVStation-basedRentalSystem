// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository.Context;

#nullable disable

namespace Repository.Context.Migrations
{
    [DbContext(typeof(EVSDbContext))]
    partial class EVSDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Repository.Entities.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BatteryDuration")
                        .HasColumnType("int");

                    b.Property<string>("BatteryType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("RentPricePerDay")
                        .HasColumnType("float");

                    b.Property<double>("RentPricePerDayWithDriver")
                        .HasColumnType("float");

                    b.Property<double>("RentPricePerHour")
                        .HasColumnType("float");

                    b.Property<double>("RentPricePerHourWithDriver")
                        .HasColumnType("float");

                    b.Property<int>("Seats")
                        .HasColumnType("int");

                    b.Property<string>("SizeType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TrunkCapacity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Cars");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BatteryDuration = 350,
                            BatteryType = "Lithium-Ion",
                            CreatedAt = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://example.com/tesla_model_3.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            Model = "Tesla Model 3",
                            Name = "Model 3",
                            RentPricePerDay = 1000000.0,
                            RentPricePerDayWithDriver = 1400000.0,
                            RentPricePerHour = 45000.0,
                            RentPricePerHourWithDriver = 60000.0,
                            Seats = 5,
                            SizeType = "Sedan",
                            Status = 1,
                            TrunkCapacity = 425
                        },
                        new
                        {
                            Id = 2,
                            BatteryDuration = 240,
                            BatteryType = "Lithium-Ion",
                            CreatedAt = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://example.com/nissan_leaf.jpg",
                            IsActive = true,
                            IsDeleted = false,
                            Model = "Nissan Leaf",
                            Name = "Leaf",
                            RentPricePerDay = 800000.0,
                            RentPricePerDayWithDriver = 1200000.0,
                            RentPricePerHour = 35000.0,
                            RentPricePerHourWithDriver = 50000.0,
                            Seats = 5,
                            SizeType = "Hatchback",
                            Status = 1,
                            TrunkCapacity = 435
                        });
                });

            modelBuilder.Entity("Repository.Entities.CarDeliveryHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BatteryLevelStart")
                        .HasColumnType("int");

                    b.Property<int>("CarId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OdometerStart")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.Property<string>("VehicleConditionStart")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderId");

                    b.HasIndex("StaffId");

                    b.ToTable("CarDeliveryHistories");
                });

            modelBuilder.Entity("Repository.Entities.CarRentalLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CarId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.HasIndex("LocationId");

                    b.ToTable("CarRentalLocations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CarId = 1,
                            IsDeleted = false,
                            LocationId = 1,
                            Quantity = 5
                        });
                });

            modelBuilder.Entity("Repository.Entities.CarReturnHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BatteryLevelEnd")
                        .HasColumnType("int");

                    b.Property<int>("CarId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("OdometerEnd")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.Property<string>("VehicleConditionEnd")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderId");

                    b.HasIndex("StaffId");

                    b.ToTable("CarReturnHistories");
                });

            modelBuilder.Entity("Repository.Entities.CitizenId", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("CitizenIdNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("CitizenIds");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BirthDate = new DateOnly(1990, 1, 1),
                            CitizenIdNumber = "058203123456",
                            CreatedAt = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://example.com/citizen_id_sample.jpg",
                            Name = "Customer CitizenID Sample",
                            Status = 1,
                            UserId = 3
                        });
                });

            modelBuilder.Entity("Repository.Entities.DriverLicense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("DriverLicenses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://example.com/driver_license_sample.jpg",
                            Name = "Customer DriverLicense Sample",
                            Status = 1,
                            UserId = 3
                        });
                });

            modelBuilder.Entity("Repository.Entities.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("RentalOrderId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RentalOrderId");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("Repository.Entities.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RentalOrderId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Repository.Entities.RentalContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LesseeId")
                        .HasColumnType("int");

                    b.Property<int?>("LessorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RentalDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RentalOrderId")
                        .HasColumnType("int");

                    b.Property<string>("RentalPeriod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TerminationClause")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LesseeId");

                    b.HasIndex("LessorId");

                    b.HasIndex("UserId");

                    b.ToTable("RentalContacts");
                });

            modelBuilder.Entity("Repository.Entities.RentalLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Coordinates")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("RentalLocations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "123 Tran Hung Dao St, Ho Chi Minh City",
                            Coordinates = "10.7769,106.7009",
                            CreatedAt = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Downtown Rental Location"
                        },
                        new
                        {
                            Id = 2,
                            Address = "456 Nguyen Cuu Phuc St, Ho Chi Minh City",
                            Coordinates = "10.7950,106.6540",
                            CreatedAt = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Airport Rental Location"
                        });
                });

            modelBuilder.Entity("Repository.Entities.RentalOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CarId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Discount")
                        .HasColumnType("int");

                    b.Property<double?>("ExtraFee")
                        .HasColumnType("float");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PaymentId")
                        .HasColumnType("int");

                    b.Property<int?>("RentalContactId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<double?>("SubTotal")
                        .HasColumnType("float");

                    b.Property<double?>("Total")
                        .HasColumnType("float");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.HasIndex("PaymentId")
                        .IsUnique()
                        .HasFilter("[PaymentId] IS NOT NULL");

                    b.HasIndex("RentalContactId")
                        .IsUnique()
                        .HasFilter("[RentalContactId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("RentalOrders");
                });

            modelBuilder.Entity("Repository.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CitizenId")
                        .HasColumnType("int");

                    b.Property<string>("ConfirmEmailToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DriverLicenseId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResetPasswordToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ResetPasswordTokenExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@gmail.com",
                            FullName = "Admin User",
                            IsActive = true,
                            IsEmailConfirmed = true,
                            Password = "1",
                            PasswordHash = "$2a$12$z.y2vdQFkt/drkj6yzAXm.6v/rirvWIaw1tXyIgvR7dki1roEfLXm",
                            Role = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "staff@gmail.com",
                            FullName = "Staff User",
                            IsActive = true,
                            IsEmailConfirmed = true,
                            Password = "1",
                            PasswordHash = "$2a$12$z.y2vdQFkt/drkj6yzAXm.6v/rirvWIaw1tXyIgvR7dki1roEfLXm",
                            Role = "Staff"
                        },
                        new
                        {
                            Id = 3,
                            CitizenId = 1,
                            CreatedAt = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DriverLicenseId = 1,
                            Email = "customer@gmail.com",
                            FullName = "Customer User",
                            IsActive = true,
                            IsEmailConfirmed = true,
                            Password = "1",
                            PasswordHash = "$2a$12$z.y2vdQFkt/drkj6yzAXm.6v/rirvWIaw1tXyIgvR7dki1roEfLXm",
                            Role = "Customer"
                        });
                });

            modelBuilder.Entity("Repository.Entities.CarDeliveryHistory", b =>
                {
                    b.HasOne("Repository.Entities.Car", "Car")
                        .WithMany()
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Repository.Entities.User", "Customer")
                        .WithMany("CarDeliveryHistories")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Repository.Entities.RentalOrder", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Repository.Entities.User", "Staff")
                        .WithMany()
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("Customer");

                    b.Navigation("Order");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("Repository.Entities.CarRentalLocation", b =>
                {
                    b.HasOne("Repository.Entities.Car", "Car")
                        .WithMany("CarRentalLocations")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Repository.Entities.RentalLocation", "Location")
                        .WithMany("CarRentalLocations")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Repository.Entities.CarReturnHistory", b =>
                {
                    b.HasOne("Repository.Entities.Car", "Car")
                        .WithMany()
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Repository.Entities.User", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Repository.Entities.RentalOrder", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Repository.Entities.User", "Staff")
                        .WithMany()
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("Customer");

                    b.Navigation("Order");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("Repository.Entities.CitizenId", b =>
                {
                    b.HasOne("Repository.Entities.User", "User")
                        .WithOne("CitizenIdNavigation")
                        .HasForeignKey("Repository.Entities.CitizenId", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Repository.Entities.DriverLicense", b =>
                {
                    b.HasOne("Repository.Entities.User", "User")
                        .WithOne("DriverLicense")
                        .HasForeignKey("Repository.Entities.DriverLicense", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Repository.Entities.Feedback", b =>
                {
                    b.HasOne("Repository.Entities.RentalOrder", "RentalOrder")
                        .WithMany()
                        .HasForeignKey("RentalOrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Repository.Entities.User", "User")
                        .WithMany("Feedback")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RentalOrder");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Repository.Entities.Payment", b =>
                {
                    b.HasOne("Repository.Entities.User", "User")
                        .WithMany("Payments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Repository.Entities.RentalContact", b =>
                {
                    b.HasOne("Repository.Entities.User", "Lessee")
                        .WithMany()
                        .HasForeignKey("LesseeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Repository.Entities.RentalLocation", "Lessor")
                        .WithMany("RentalContacts")
                        .HasForeignKey("LessorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Repository.Entities.User", null)
                        .WithMany("RentalContacts")
                        .HasForeignKey("UserId");

                    b.Navigation("Lessee");

                    b.Navigation("Lessor");
                });

            modelBuilder.Entity("Repository.Entities.RentalOrder", b =>
                {
                    b.HasOne("Repository.Entities.Car", "Car")
                        .WithMany("RentalOrders")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Repository.Entities.Payment", "Payment")
                        .WithOne("RentalOrder")
                        .HasForeignKey("Repository.Entities.RentalOrder", "PaymentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Repository.Entities.RentalContact", "RentalContact")
                        .WithOne("RentalOrder")
                        .HasForeignKey("Repository.Entities.RentalOrder", "RentalContactId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Repository.Entities.User", "User")
                        .WithMany("RentalOrders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("Payment");

                    b.Navigation("RentalContact");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Repository.Entities.Car", b =>
                {
                    b.Navigation("CarRentalLocations");

                    b.Navigation("RentalOrders");
                });

            modelBuilder.Entity("Repository.Entities.Payment", b =>
                {
                    b.Navigation("RentalOrder");
                });

            modelBuilder.Entity("Repository.Entities.RentalContact", b =>
                {
                    b.Navigation("RentalOrder");
                });

            modelBuilder.Entity("Repository.Entities.RentalLocation", b =>
                {
                    b.Navigation("CarRentalLocations");

                    b.Navigation("RentalContacts");
                });

            modelBuilder.Entity("Repository.Entities.User", b =>
                {
                    b.Navigation("CarDeliveryHistories");

                    b.Navigation("CitizenIdNavigation");

                    b.Navigation("DriverLicense");

                    b.Navigation("Feedback");

                    b.Navigation("Payments");

                    b.Navigation("RentalContacts");

                    b.Navigation("RentalOrders");
                });
#pragma warning restore 612, 618
        }
    }
}
